---
import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import Layout from "../layouts/Layout.astro";
import getPosts from "../lib/getPosts";
import type { Post } from "../lib/makePost";

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((p) => ({
    params: {
      post: p.slug,
    },
    props: p,
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post } = Astro.params as Params;
const { content, title, date, author, tags } = Astro.props as Props;

const posts = await getPosts();

const postIndex = posts.findIndex((p) => p.slug === post);
const newer = posts[postIndex - 1];
const older = posts[postIndex + 1];

const post1 = posts[Math.floor(Math.random() * posts.length)];
const post2 = posts[Math.floor(Math.random() * posts.length)];
const post3 = posts[Math.floor(Math.random() * posts.length)];
const recommendedPosts: Post[] = [post1, post2, post3].filter(
  (p): p is Post => !!p
);
---

<Layout title={title}>
  {newer && (
    <a href={`/${newer.slug}`}>
      <h2>« {newer.title}</h2>
    </a>
  )}
  {
    older && (
      <a href={`/${older.slug}`}>
        <h2>{older.title} »</h2>
      </a>
    )
  }
  <h1>{title}</h1>
  <p>{date}</p>
  <p>By {author}</p>
  <a href=`/${post}`>Permalink</a>
  <div set:html={content} />
  <h2>Tags</h2>
  <ul class="tags">
    {
      tags.map((t) => (
        <li>
          <a href={`/tags/${t}`}>{t}</a>
        </li>
      ))
    }
  </ul>
  <h2>Recommended Posts</h2>
  <ul>
    {
      recommendedPosts.map((p) => (
        <li>
          <a href={`/${p.slug}`}>{p.title}</a>
        </li>
      ))
    }
  </ul>
  <h2>Comments</h2>
</Layout>
